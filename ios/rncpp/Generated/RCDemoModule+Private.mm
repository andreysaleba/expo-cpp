// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from main.djinni

#import "RCDemoModule+Private.h"
#import "RCDemoModule.h"
#import "RVReactDjinni.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "RVJavascriptArray+Private.h"
#import "RVJavascriptCallback+Private.h"
#import "RVJavascriptMap+Private.h"
#import "RVJavascriptPromise+Private.h"
#import "RVReactBridge+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface RCDemoModule ()

- (id)initWithCpp:(const std::shared_ptr<::DemoModule>&)cppRef;

@end

@implementation RCDemoModule {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::DemoModule>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::DemoModule>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}
+ (NSString *)moduleName
{
    return @"DemoModule";
}

+ (nullable RCDemoModule *)create:(nullable id<RVReactBridge>)bridge {
    try {
        auto objcpp_result_ = ::DemoModule::create(::djinni_generated::ReactBridge::toCpp(bridge));
        return ::djinni_generated::DemoModule::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_REMAP_METHOD(testPromise, testPromise:(nonnull RCTPromiseResolveBlock)resolver
                                 rejecter:(nonnull RCTPromiseRejectBlock)rejecter) {
    try {
        _cppRefHandle.get()->testPromise(::djinni_generated::JavascriptPromise::toCpp([RVReactDjinni wrapPromiseWithResolver:resolver rejecter:rejecter]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(testCallback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->testCallback(::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_REMAP_METHOD(testMap, testMap:(nullable NSDictionary *)map
                         resolver:(nonnull RCTPromiseResolveBlock)resolver
                         rejecter:(nonnull RCTPromiseRejectBlock)rejecter) {
    try {
        _cppRefHandle.get()->testMap(::djinni_generated::JavascriptMap::toCpp([RVReactDjinni wrapMap:map]),
                                     ::djinni_generated::JavascriptPromise::toCpp([RVReactDjinni wrapPromiseWithResolver:resolver rejecter:rejecter]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(testArray:(nullable NSArray *)array
                   callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->testArray(::djinni_generated::JavascriptArray::toCpp([RVReactDjinni wrapArray:array]),
                                       ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_REMAP_METHOD(testBool, testBool:(BOOL)value
                           resolver:(nonnull RCTPromiseResolveBlock)resolver
                           rejecter:(nonnull RCTPromiseRejectBlock)rejecter) {
    try {
        _cppRefHandle.get()->testBool(::djinni::Bool::toCpp(value),
                                      ::djinni_generated::JavascriptPromise::toCpp([RVReactDjinni wrapPromiseWithResolver:resolver rejecter:rejecter]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(testPrimitives:(int)i
                               d:(double)d
                        callback:(nonnull RCTResponseSenderBlock)callback) {
    try {
        _cppRefHandle.get()->testPrimitives(::djinni::I32::toCpp(i),
                                            ::djinni::F64::toCpp(d),
                                            ::djinni_generated::JavascriptCallback::toCpp([RVReactDjinni wrapCallback:callback]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_REMAP_METHOD(testString, testString:(nullable NSString *)value
                               resolver:(nonnull RCTPromiseResolveBlock)resolver
                               rejecter:(nonnull RCTPromiseRejectBlock)rejecter) {
    try {
        _cppRefHandle.get()->testString(::djinni::String::toCpp(value),
                                        ::djinni_generated::JavascriptPromise::toCpp([RVReactDjinni wrapPromiseWithResolver:resolver rejecter:rejecter]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(testEventWithArray:(nullable NSArray *)value) {
    try {
        _cppRefHandle.get()->testEventWithArray(::djinni_generated::JavascriptArray::toCpp([RVReactDjinni wrapArray:value]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_EXPORT_METHOD(testEventWithMap:(nullable NSDictionary *)value) {
    try {
        _cppRefHandle.get()->testEventWithMap(::djinni_generated::JavascriptMap::toCpp([RVReactDjinni wrapMap:value]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

RCT_REMAP_METHOD(getOpenSSLVersion, getOpenSSLVersion:(nonnull RCTPromiseResolveBlock)resolver
                                             rejecter:(nonnull RCTPromiseRejectBlock)rejecter) {
    try {
        _cppRefHandle.get()->getOpenSSLVersion(::djinni_generated::JavascriptPromise::toCpp([RVReactDjinni wrapPromiseWithResolver:resolver rejecter:rejecter]));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NSDictionary *)constantsToExport
{
    return @{
        @"EVENT_NAME": RCDemoModuleEVENTNAME,
        @"STRING_CONSTANT": RCDemoModuleSTRINGCONSTANT,
        @"INT_CONSTANT": @(RCDemoModuleINTCONSTANT),
        @"DOUBLE_CONSTANT": @(RCDemoModuleDOUBLECONSTANT),
        @"BOOL_CONSTANT": @(RCDemoModuleBOOLCONSTANT),
    };
}

namespace djinni_generated {

auto DemoModule::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DemoModule::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<RCDemoModule>(cpp);
}

}  // namespace djinni_generated

@end
